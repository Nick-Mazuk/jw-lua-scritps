--[[
$module ziputils

Functions for unzipping files. (Future may include zipping as well.)

Dependencies:

- The Windows version uses `PowerShell 5`. Users of Windows 8.1 must manually upgrade
to this version of PowerShell.
- The macOS version uses `unzip` and `gunzip`.
- Except as noted, the necessary tools are pre-installed with a typical installation of any version
of the OS that supports 64-bit Finale.

Thie library expects strings to be client-encoded.  On macOS, client encoding is always utf8,
but on Windows it can be any number of encodings depending on the locale settings and version of Windows.
You can use `client.encode_with_client_codepage` to convert a utf8 string to client encoding.
The `client.execute` function requires client encoding as do `lfs` and all built-in
Lua `os` and `io` functions that take strings as input.
]] --
local ziputils = {}

local client = require("library.client")

--[[
% calc_rmdir_command

Returns the platform-dependent command to remove a directory. It can be passed
to `client.execute`.

**WARNING** The command, if executed, permanently deletes the contents of the directory.
You would normally call this on the temporary directory name from `calc_temp_output_path`.
But it works on any directory.

@ path_to_remove (string) client-encoded path of directory to remove.
: (string) client-encoded command string to execute.
]]
function ziputils.calc_rmdir_command(path_to_remove)
    return (finenv.UI():IsOnMac() and "rm -r " or "cmd /c rmdir /s /q ") .. path_to_remove
end

--[[
% calc_delete_file_command

Returns the platform-dependent command to delete a file. It can be passed
to `client.execute`.

**WARNING** The command, if executed, permanently deletes the file.
You would normally call this on the temporary directory name from `calc_temp_output_path`.
But it works on any directory.

@ path_to_remove (string) client-encoded path of directory to remove.
: (string) client-encoded command string to execute.
]]
function ziputils.calc_delete_file_command(path_to_remove)
    return (finenv.UI():IsOnMac() and "rm " or "cmd /c del ") .. path_to_remove
end

--[[
% calc_temp_output_path

Returns a path that can be used as a temporary target for unzipping. The caller may create it
either as a file or a directory, because it is guaranteed not to exist when it is returned and it does
not have a terminating path delimiter. Also returns a platform-dependent unzip command that can be
passed to `client.execute` to unzip the input archive into the temporary name as a directory.

This function requires `luaosutils`.

@ [archive_path] (string) client-encoded filepath to the zip archive that is included in the zip command.
: (string) client-encoded temporary path generated by the system.
: (string) client-encoded unzip command that can be used to unzip a multifile archived directory structure into the temporary path.
]]
function ziputils.calc_temp_output_path(archive_path)
    archive_path = archive_path or ""

    local output_dir = os.tmpname()
    local rmcommand = ziputils.calc_delete_file_command(output_dir)
    client.execute(rmcommand)

    local zipcommand
    if finenv.UI():IsOnMac() then
        zipcommand = "unzip \"" .. archive_path .. "\" -d " .. output_dir
    else
        zipcommand = table.concat({
            "$archivePath = '%s'",
            "$outputDir = '%s'",
            "$zipPath = $archivePath + '.zip'",
            "Copy-Item -Path $archivePath -Destination $zipPath",
            "Expand-Archive -Path $zipPath -DestinationPath $outputDir",
            "Remove-Item -Path $zipPath",
        }, "; ")
        zipcommand = string.format(zipcommand, archive_path, output_dir)
        zipcommand = string.format("powershell -c \"%s\"", zipcommand)
    end
    return output_dir, zipcommand
end

--[[
% calc_gunzip_command

Returns the platform-dependent command to gunzip a file to `stdout`. It can be passed
to `client.execute`, which will then return the text directly.

@ archive_path (string) client-encoded path of source gzip archive.
: (string) client-encoded command string to execute.
]]
function ziputils.calc_gunzip_command(archive_path)
    if finenv.UI():IsOnMac() then
        return "gunzip -c " .. archive_path
    else
        local command = table.concat({
            "$fs = New-Object IO.Filestream('%s',([IO.FileMode]::Open),([IO.FileAccess]::Read),([IO.FileShare]::Read))",
            "$gz = New-Object IO.Compression.GzipStream($fs,[IO.Compression.CompressionMode]::Decompress)",
            "$sr = New-Object IO.StreamReader($gz)",
            "while (-not $sr.EndOfStream) { Write-Output $sr.ReadLine() }",
            "$sr.Close()"
        }, "; ")
        command = string.format(command, archive_path)
        return string.format("powershell -c \"%s\"", command)
    end
end

--[[
% calc_is_gzip

Detects if an input buffer is a gzip archive.

@ buffer (string) binary data to check if it is a gzip archive
: (boolean) true if the buffer is a gzip archive
]]
function ziputils.calc_is_gzip(buffer)
    local byte1, byte2, byte3, byte4 = string.byte(buffer, 1, 4)
    return byte1 == 0x1F and byte2 == 0x8B and byte3 == 0x08 and byte4 == 0x00
end

return ziputils
